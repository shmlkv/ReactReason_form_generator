// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function generateInputs(t, name, validators) {
  var valid = List.map((function (validator) {
          if (typeof validator === "number") {
            return /* tuple */[
                    "required",
                    "true"
                  ];
          } else {
            switch (validator.tag | 0) {
              case 0 : 
                  return /* tuple */[
                          "maxLength",
                          String(validator[0])
                        ];
              case 1 : 
                  return /* tuple */[
                          "value",
                          validator[0]
                        ];
              case 2 : 
                  return /* tuple */[
                          "placeholder",
                          validator[0]
                        ];
              
            }
          }
        }), validators);
  var input = React.createElement("input", {
        name: name,
        type: t
      });
  return React.cloneElement(input, Js_dict.fromList(valid));
}

function render(field) {
  switch (field.tag | 0) {
    case 0 : 
        return generateInputs("input", field[0], field[1]);
    case 1 : 
        return generateInputs("email", field[0], field[1]);
    case 2 : 
        return generateInputs("password", field[0], field[1]);
    case 3 : 
        return generateInputs("number", field[0], field[1]);
    case 4 : 
        return generateInputs("checkbox", field[0], field[1]);
    case 5 : 
        return generateInputs("radio", field[0], field[1]);
    case 6 : 
        return generateInputs("button", field[0], field[1]);
    
  }
}

var xs = /* :: */[
  /* InputEmail */Block.__(1, [
      "email",
      /* :: */[
        /* Required */0,
        /* :: */[
          /* Placeholder */Block.__(2, ["Email"]),
          /* [] */0
        ]
      ]
    ]),
  /* :: */[
    /* InputPassword */Block.__(2, [
        "password",
        /* :: */[
          /* Required */0,
          /* :: */[
            /* MaxLength */Block.__(0, [4]),
            /* :: */[
              /* Placeholder */Block.__(2, ["Password (<4 chars)"]),
              /* [] */0
            ]
          ]
        ]
      ]),
    /* :: */[
      /* Button */Block.__(6, [
          "name",
          /* :: */[
            /* Text */Block.__(1, ["Login"]),
            /* [] */0
          ]
        ]),
      /* [] */0
    ]
  ]
];

var result = List.map(render, xs);

var component = ReasonReact.statelessComponent("form");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("form", undefined, ArrayLabels.of_list(result));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.generateInputs = generateInputs;
exports.render = render;
exports.xs = xs;
exports.result = result;
exports.component = component;
exports.make = make;
/* result Not a pure module */
